{"version":3,"file":"static/webpack/static/development/pages/entry/[entry].js.40d0f6a6d9f7f208ecc8.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/readOnlyError.js","webpack:///./pages/entry/[entry].tsx"],"sourcesContent":["export default function _readOnlyError(name) {\n  throw new Error(\"\\\"\" + name + \"\\\" is read-only\");\n}","import * as React from \"react\";\nimport { NextPage } from \"next\";\nimport fetch from \"isomorphic-unfetch\";\nimport ReactMarkdown from \"react-markdown\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Typography, CardHeader, Avatar } from \"@material-ui/core\";\n\nimport Layout from \"../../src/components/Layout\";\nimport ShareButtons from \"../../src/components/ShareButtons\";\nimport { HOST } from \"../../const\";\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    maxWidth: 720,\n    padding: \"0px 20px\",\n    margin: \"40px 0px\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  },\n  article: {},\n  title: {\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: 30\n    },\n    [theme.breakpoints.up(\"sm\")]: {\n      fontSize: 40\n    }\n  },\n  header: {\n    fontSize: 16\n  },\n  avatar: {\n    backgroundColor: \"red\",\n    width: 50,\n    height: 50\n  },\n  headerImage: {\n    width: \"100%\"\n  },\n  body: {\n    // padding: \"2rem\",\n    lineHeight: 1.58,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: 18\n    },\n    [theme.breakpoints.up(\"sm\")]: {\n      fontSize: 21\n    }\n  },\n  h1: {\n    fontSize: 34,\n    lineHeight: 1.12,\n    marginTop: \"1.95em\",\n    marginBottom: \"-0.28em\",\n    fontWeight: 600\n  },\n  h2: {\n    fontSize: 26,\n    lineHeight: 1.18,\n    marginTop: \"1.72em\",\n    marginBottom: \"-0.31em\",\n    fontWeight: 600\n  },\n  h3: {\n    // TODO: ちゃんと設定する\n    fontSize: 26,\n    lineHeight: 1.18,\n    marginBottom: 0,\n    fontWeight: 600\n  },\n  firstParagraph: {\n    marginTop: \"0.86em\",\n    marginBottom: \"-0.46em\"\n  },\n  paragraph: {\n    marginTop: \"2em\",\n    marginBottom: \"-0.46em\"\n  },\n  list: {\n    margin: 0,\n  },\n  firstListItem: {\n    marginTop: \"0.86em\",\n    marginBottom: \"-0.46em\"\n  },\n  listItem: {\n    marginTop: \"1.05em\",\n    marginBottom: \"-0.46em\"\n  },\n  bottom: {\n    marginTop: 40,\n    width: \"100%\"\n  }\n}));\n\nconst EntryPage: NextPage<any> = (props: any) => {\n  const classes = useStyles();\n  let isFirstP = false;\n  let isFirstListItem = true;\n\n  const Heading = (props: any) => {\n    const level = props.level;\n    const tagName = `h${level}`;\n\n    // NOTE: エラー回避のため雑: No index signature with a parameter of type 'string' was found on type 'Record<\"title\" | ...\n    let className = classes.h1;\n    switch (tagName) {\n      case \"h2\":\n        className = classes.h2;\n        break;\n      case \"h3\":\n        className = classes.h3;\n        break;\n      default:\n        break;\n    }\n\n    isFirstP = true;\n    return React.createElement(tagName, { className }, props.children);\n  };\n\n  const Paragraph = (props: any) => {\n    const tagName = \"p\";\n    let className = classes.paragraph;\n    if (isFirstP) {\n      className = classes.firstParagraph;\n    }\n\n    isFirstP = false;\n    return React.createElement(tagName, { className }, props.children);\n  };\n\n  const List = (props: any) => {\n    const tagName = props.ordered ? \"ol\" : \"ul\";\n    const className = classes.list;\n    isFirstListItem = true;\n    return React.createElement(tagName, { className }, props.children);\n  };\n\n  const ListItem = (props: any) => {\n    const tagName = \"li\";\n    const className = classes.listItem;\n    if (isFirstListItem) {\n      className = classes.firstListItem;\n    }\n    isFirstListItem = false;\n    return React.createElement(tagName, { className }, props.children);\n  };\n\n  return (\n    <Layout title=\"Entry\">\n      <Grid container className={classes.container}>\n        <article className={classes.article}>\n          <section>\n            {/* タイトル */}\n            <Grid container>\n              <Grid item xs={12}>\n                <Typography variant=\"h1\" className={classes.title}>\n                  {props.title}\n                </Typography>\n              </Grid>\n            </Grid>\n            {/* 投稿者情報 */}\n            <Grid container>\n              <Grid item xs={6}>\n                <CardHeader\n                  classes={{ title: classes.header, subheader: classes.header }}\n                  avatar={\n                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                      S\n                    </Avatar>\n                  }\n                  title=\"shiopon01\"\n                  subheader={props.createdAt}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <ShareButtons url={\"http://example.com\"} />\n              </Grid>\n            </Grid>\n            {/* 画像 */}\n            {/* <Grid container>\n              <Grid item xs={12}>\n                <img src={props.image} className={classes.headerImage} />\n              </Grid>\n            </Grid> */}\n            {/* 記事 */}\n            <Grid container>\n              <Grid item xs={12}>\n                <ReactMarkdown\n                  className={classes.body}\n                  source={props.body}\n                  renderers={{\n                    heading: Heading,\n                    paragraph: Paragraph,\n                    list: List,\n                    listItem: ListItem\n                  }}\n                ></ReactMarkdown>\n              </Grid>\n            </Grid>\n          </section>\n        </article>\n        <div className={classes.bottom}>\n          <Grid container>\n            <Grid item xs={12}>\n              <ShareButtons url={\"http://example.com\"} />\n            </Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Layout>\n  );\n};\n\nEntryPage.getInitialProps = async (req: any) => {\n  const key: string = req.query.entry as string;\n  const res = await fetch(HOST + \"/api/articles/\" + key);\n  const data = await res.json();\n  return { ...data };\n};\n\nexport default EntryPage;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AADA;AAIA;AADA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AADA;AAIA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AA9EA;AAAA;AACA;AAmFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AARA;AACA;AAUA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;;;;A","sourceRoot":""}